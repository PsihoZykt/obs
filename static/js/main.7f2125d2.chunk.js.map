{"version":3,"sources":["serviceWorker.js","tmijs/options.js","obs/obs.js","chat/Chat.jsx","App.js","index.js","chat/Chat.module.css"],"names":["Boolean","window","location","hostname","match","options","debug","connection","reconnect","secure","identity","username","password","channels","require","HtmlToReactParser","Parser","parseEmotes","message","emotes","htmlToReactParser","chatWithTwitchEmotes","parseTwitchEmotes","chatWithAllEmotes","parseBTTV","split","join","parse","newMessage","emoteIndex","emote","charIndexes","emoteIndexes","i","parseInt","chat","newChat","forEach","push","name","id","Chat","props","chatElement","map","el","userstate","color","Math","floor","random","getRandomColor","className","s","style","messageText","wrapper","randomColorsChosen","defaultColors","App","state","client","tmi","connect","on","address","port","console","log","channel","self","chan","length","shift","setState","this","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.7f2125d2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let username = \"advicerfromchat\";\r\nconst password = \"oauth:cchg3xx5wmu0pcspo0ku3eoqmqsfxd\"\r\nconst channels = [\r\n    'psihoz_ykt',\r\n    \"ariywariy\",\r\n]\r\n\r\nconst options = {\r\n    options: {\r\n        debug: true,\r\n    },\r\n    connection: {\r\n        reconnect: true,\r\n        secure: true\r\n    },\r\n    identity: {\r\n        username,\r\n        password,\r\n    },\r\n    channels: channels,\r\n\r\n};\r\n\r\nexport default options;","const OBSWebSocket = require('obs-websocket-js');\r\nconst obs = new OBSWebSocket();\r\nexport let obsConnect = () => {\r\n    obs.connect({\r\n        address: 'localhost:4444',\r\n        password: ''\r\n    })\r\n        .then(() => {\r\n            console.log(`Success! We're connected & authenticated.`);\r\n\r\n            return obs.send('GetSceneList');\r\n        })\r\n        .then(data => {\r\n            console.log(`${data.scenes.length} Available Scenes!`);\r\n\r\n            data.scenes.forEach(scene => {\r\n                if (scene.name !== data.currentScene) {\r\n                    console.log(`Found a different scene! Switching to Scene: ${scene.name}`);\r\n\r\n                    obs.send('SetCurrentScene', {\r\n                        'scene-name': scene.name\r\n                    });\r\n                }\r\n            });\r\n        })\r\n        .catch(err => { // Promise convention dicates you have a catch on every chain.\r\n            console.log(err);\r\n        });\r\n\r\n}\r\nexport let setGameInfo = (channelName, channelRating, channelTown, oppName, oppRating, oppTown) => {\r\n    console.log(`${channelName} ${channelTown} ${channelRating} ${oppName} ${oppRating} ${oppTown}`)\r\n    obs.send('SetTextGDIPlusProperties', {source: \"игра\", text: `${channelName} ${channelTown} ${channelRating} ${oppName} ${oppRating} ${oppTown}`}).then(data => {\r\n        console.log(data);\r\n    });\r\n}\r\n\r\nexport let obsTest2 = () => {\r\n    obs.send(\"SetSceneItemProperties\", {\r\n        sceneName: \"Сцена\",\r\n        item: \"change\",\r\n        type: {}\r\n\r\n    }).then(data => console.log(data))\r\n}\r\n","import React from 'react';\r\nimport s from './Chat.module.css'\r\nimport emotes from '../emotes/emotes'\r\n\r\nlet HtmlToReactParser = require('html-to-react').Parser;\r\nconst Chat = (props) => {\r\n\r\n\r\n    let chatElement = props.chat.map(el => {\r\n        let message = parseEmotes(el.message, el.userstate.emotes);\r\n        let userColor = \"\";\r\n        if(!el.userstate.color){\r\n           el.userstate.color = getRandomColor();\r\n        }\r\n        return <div className={s.message}>\r\n            <span style={{color: el.userstate.color}}> {el.userstate.username}: </span>\r\n            <span className={s.messageText}> {message} </span>\r\n        </div>\r\n    })\r\n    return (\r\n        <div className={s.wrapper}>\r\n            {chatElement}\r\n        </div>\r\n    );\r\n};\r\nfunction getRandomColor() {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n\r\nlet parseEmotes = (message, emotes) => {\r\n    let htmlToReactParser = new HtmlToReactParser();\r\n    //Get chat array with DEFAULT twitch emotes\r\n    let chatWithTwitchEmotes = parseTwitchEmotes(message, emotes)\r\n    // Get chat string with ALL emotes\r\n    let chatWithAllEmotes = parseBTTV(chatWithTwitchEmotes.split(\" \")).join(\" \");\r\n    // Make react element from string\r\n    return  htmlToReactParser.parse(chatWithAllEmotes)\r\n}\r\nlet parseTwitchEmotes = (message, emotes) => {\r\n    let newMessage = message.split(\"\");\r\n\r\n    for (let emoteIndex in emotes) {\r\n        let emote = emotes[emoteIndex];\r\n\r\n        for (let charIndexes in emote) {\r\n            let emoteIndexes = emote[charIndexes];\r\n\r\n            if (typeof emoteIndexes == \"string\") {\r\n                emoteIndexes = emoteIndexes.split(\"-\");\r\n                emoteIndexes = [parseInt(emoteIndexes[0]), parseInt(emoteIndexes[1])];\r\n\r\n                for (let i = emoteIndexes[0]; i <= emoteIndexes[1]; ++i) {\r\n                    newMessage[i] = \"\";\r\n                }\r\n\r\n                newMessage[emoteIndexes[0]] = `<img class=\"emoticon\" src=http://static-cdn.jtvnw.net/emoticons/v1/${emoteIndex}/1.0\\>`;\r\n            }\r\n        }\r\n    }\r\n    return newMessage.join(\"\")\r\n}\r\nlet parseBTTV = (chat) => {\r\n\r\n    let newChat = [];\r\n    chat.forEach((message, i) => {\r\n        newChat.push(message);\r\n        emotes.forEach(emote => {\r\n            if (message === emote.name) {\r\n                newChat[i] =`<img src=https://cdn.betterttv.net/emote/${emote.id}/1x>`\r\n            }\r\n        })\r\n\r\n    })\r\n    return newChat;\r\n}\r\n\r\nexport default Chat;","import React from 'react';\nimport tmi from 'tmi.js'\nimport options from './tmijs/options'\nimport commandsHandler from \"./commandsHandler\";\nimport Chat from \"./chat/Chat\";\nlet  randomColorsChosen = {};\nlet defaultColors = [\n    '#FF0000','#0000FF','#008000','#B22222','#FF7F50',\n    '#9ACD32','#FF4500','#2E8B57','#DAA520','#D2691E',\n    '#5F9EA0','#1E90FF','#FF69B4','#8A2BE2','#00FF7F'\n]\nfunction resolveColor(chan, name, color) {\n    if(color !== null) {\n        return color;\n    }\n    if(!(chan in randomColorsChosen)) {\n        randomColorsChosen[chan] = {};\n    }\n    if(name in randomColorsChosen[chan]) {\n        color = randomColorsChosen[chan][name];\n    }\n    else {\n        color = defaultColors[Math.floor(Math.random()*defaultColors.length)];\n        randomColorsChosen[chan][name] = color;\n    }\n    return color;\n}\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {chat: []}\n        window.state = this.state;\n        this.client = new tmi.client(options);\n        this.client.connect()\n        this.client.on('connected', (address, port) => {\n            console.log(\"connected\")\n        });\n        this.client.on('chat', (channel, userstate, message, self) => {\n            if(this.state.chat.length > 10){\n                this.state.chat.shift()\n            }\n            userstate.color = resolveColor(channel, userstate.username, userstate.color);\n            console.log(message)\n            this.setState({\n                ...this.state, chat: [...this.state.chat,\n                    {\n                        userstate, message\n                    }]\n            })\n            // commandsHandler.handleCommand(message, channel, userstate)\n        });\n    }\n\n    render() {\n        return <Chat chat={this.state.chat}/>\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Chat_wrapper__Hz4vW\",\"message\":\"Chat_message__2m2F9\",\"messageText\":\"Chat_messageText__mxlcx\"};"],"sourceRoot":""}