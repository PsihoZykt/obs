{"version":3,"sources":["obs/obs.js","App.js","h3lobby.js","serviceWorker.js","index.js"],"names":["obs","require","options","debug","secure","connection","reconnect","identity","username","password","channels","App","props","state","chat","window","client","tmi","connect","on","address","port","console","log","channel","userstate","message","self","words","split","channelTown","channelRating","oppName","oppRating","oppTown","channelName","send","source","text","then","data","setGameInfo","onChange","e","setState","target","value","onClick","scenes","length","forEach","scene","name","currentScene","catch","err","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"qVACMA,EAAM,IADSC,EAAQ,M,kBCKvBC,GCLMD,EAAQ,KACNA,EAAQ,KDIN,CACZC,QAAS,CACLC,OAAO,EACPC,QAAQ,GAEZC,WAAY,CACRC,WAAW,GAEfC,SAAU,CACNC,SAAU,kBACVC,SAAU,wCAEdC,SAAU,CAAC,aACP,YAAa,aAAc,aAqEpBC,E,kDA/DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,KAAM,IAEpBC,OAAOF,MAAQ,EAAKA,MACpB,EAAKG,OAAS,IAAIC,IAAID,OAAOd,GAC7B,EAAKc,OAAOE,UACZ,EAAKF,OAAOG,GAAG,aAAa,SAACC,EAASC,GAClCC,QAAQC,IAAI,gBAEhB,EAAKP,OAAOG,GAAG,QAAQ,SAACK,EAASC,EAAWC,EAASC,GACjD,GAA2B,eAAvBF,EAAUjB,SAA2B,CACrC,IAAMoB,EAAQF,EAAQG,MAAM,KACtBC,EAAcF,EAAM,GACpBG,EAAgBH,EAAM,GAEtBI,GADKJ,EAAM,GACDA,EAAM,IAChBK,EAAYL,EAAM,GAClBM,EAAUN,EAAM,GACtBN,QAAQC,IAAR,UAAeO,EAAf,YAA8BC,EAA9B,YAA+CC,EAA/C,YAA0DC,EAA1D,YAAuEC,IDb9D,SAACC,EAAaJ,EAAeD,EAAaE,EAASC,EAAWC,GACnFZ,QAAQC,IAAR,UAAeY,EAAf,YAA8BL,EAA9B,YAA6CC,EAA7C,YAA8DC,EAA9D,YAAyEC,EAAzE,YAAsFC,IACtFlC,EAAIoC,KAAK,2BAA4B,CAACC,OAAQ,2BAAQC,KAAK,GAAD,OAAKH,EAAL,YAAoBL,EAApB,YAAmCC,EAAnC,YAAoDC,EAApD,YAA+DC,EAA/D,YAA4EC,KAAYK,MAAK,SAAAC,GACnJlB,QAAQC,IAAIiB,MCWJC,CAAY,OAAQX,EAAaC,EAAeC,EAASC,EAAWC,OApB7D,E,qDAmCT,IAAD,OACL,OAAO,6BACH,6BACI,2BAAOQ,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAL,2BAAkB,EAAK/B,OAAvB,IAA8ByB,KAAMK,EAAEE,OAAOC,YACrE,4BAAQC,QAAS,WD5D7B/C,EAAIkB,QAAQ,CACRE,QAAS,iBACTX,SAAU,KAET8B,MAAK,WAGF,OAFAjB,QAAQC,IAAR,6CAEOvB,EAAIoC,KAAK,mBAEnBG,MAAK,SAAAC,GACFlB,QAAQC,IAAR,UAAeiB,EAAKQ,OAAOC,OAA3B,uBAEAT,EAAKQ,OAAOE,SAAQ,SAAAC,GACZA,EAAMC,OAASZ,EAAKa,eACpB/B,QAAQC,IAAR,uDAA4D4B,EAAMC,OAElEpD,EAAIoC,KAAK,kBAAmB,CACxB,aAAce,EAAMC,cAKnCE,OAAM,SAAAC,GACHjC,QAAQC,IAAIgC,QCqCR,e,GAzCEC,IAAMC,WEVJC,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCdNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLlD,QAAQkD,MAAMA,EAAM9C,c","file":"static/js/main.6f67a538.chunk.js","sourcesContent":["const OBSWebSocket = require('obs-websocket-js');\r\nconst obs = new OBSWebSocket();\r\nexport let obsConnect = () => {\r\n    obs.connect({\r\n        address: 'localhost:4444',\r\n        password: ''\r\n    })\r\n        .then(() => {\r\n            console.log(`Success! We're connected & authenticated.`);\r\n\r\n            return obs.send('GetSceneList');\r\n        })\r\n        .then(data => {\r\n            console.log(`${data.scenes.length} Available Scenes!`);\r\n\r\n            data.scenes.forEach(scene => {\r\n                if (scene.name !== data.currentScene) {\r\n                    console.log(`Found a different scene! Switching to Scene: ${scene.name}`);\r\n\r\n                    obs.send('SetCurrentScene', {\r\n                        'scene-name': scene.name\r\n                    });\r\n                }\r\n            });\r\n        })\r\n        .catch(err => { // Promise convention dicates you have a catch on every chain.\r\n            console.log(err);\r\n        });\r\n\r\n}\r\nexport let setGameInfo = (channelName, channelRating, channelTown, oppName, oppRating, oppTown) => {\r\n    console.log(`${channelName} ${channelTown} ${channelRating} ${oppName} ${oppRating} ${oppTown}`)\r\n    obs.send('SetTextGDIPlusProperties', {source: \"игра\", text: `${channelName} ${channelTown} ${channelRating} ${oppName} ${oppRating} ${oppTown}`}).then(data => {\r\n        console.log(data);\r\n    });\r\n// obs.send('GetSourcesList').then(data => {\r\n//         console.log(data);\r\n//     });\r\n    // obs.send('SetTextGDIPlusProperties', {\"source\": \"Opp_1\", \"text\": \"Testing\"}).then(data => {\r\n    //     console.log(data);\r\n    // }).catch(err => console.log(err));\r\n\r\n}\r\n\r\nexport let obsTest2 = () => {\r\n    obs.send(\"SetSceneItemProperties\", {\r\n        sceneName: \"Сцена\",\r\n        item: \"change\",\r\n        type: {}\r\n\r\n    }).then(data => console.log(data))\r\n}\r\n","import React from 'react';\nimport {obsConnect, setGameInfo} from \"./obs/obs\";\nimport tmi from 'tmi.js'\nimport {h3lobby} from './h3lobby'\n\nconst options = {\n    options: {\n        debug: true,\n        secure: true\n    },\n    connection: {\n        reconnect: true,\n    },\n    identity: {\n        username: \"advicerfromchat\",\n        password: \"oauth:cchg3xx5wmu0pcspo0ku3eoqmqsfxd\",\n    },\n    channels: ['psihoz_ykt',\n        \"ariywariy\", \"nobodydie_\", \"bakhtik\"\n    ],\n};\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {chat: []}\n\n        window.state = this.state;\n        this.client = new tmi.client(options);\n        this.client.connect()\n        this.client.on('connected', (address, port) => {\n            console.log(\"connected\")\n        });\n        this.client.on('chat', (channel, userstate, message, self) => {\n            if (userstate.username === \"psihoz_ykt\") {\n                const words = message.split(' ');\n                const channelTown = words[1];\n                const channelRating = words[2];\n                const vs = words[2];\n                const oppName = words[3];\n                const oppRating = words[4];\n                const oppTown = words[5];\n                console.log(`${channelTown} ${channelRating} ${oppName} ${oppRating} ${oppTown}`)\n                setGameInfo(\"Ariy\", channelTown, channelRating, oppName, oppRating, oppTown)\n                //!set castle +3000 vs Zoom4uk 300rate Rampart\n                let rating = \"\"\n                // h3lobby.getRating(\"#ariywariy\", words).then(\n                //     el => {\n                //         rating = el\n                //         console.log(rating)\n                //     }\n                // );\n            }\n            // let chat =  [...this.state.chat, {name: userstate[\"display-name\"], text: message}];\n            //  this.setState({chat})\n        });\n    }\n\n    render() {\n        return <div>\n            <div>\n                <input onChange={(e) => this.setState({...this.state, text: e.target.value})}/>\n                <button onClick={() => {\n                    // this.setState({...this.state, chat: [...this.state.chat, {name: \"advicerfromchat\", text: this.state.text}]})\n                    // this.client.say(\"ariywariy\", this.state.text)\n                    obsConnect();\n                }\n                }> send\n                </button>\n\n                {/*<button onClick={() => {*/}\n                {/*    // this.setState({...this.state, chat: [...this.state.chat, {name: \"advicerfromchat\", text: this.state.text}]})*/}\n                {/*    // this.client.say(\"ariywariy\", this.state.text)*/}\n\n                {/*}*/}\n                {/*}> send*/}\n                {/*</button>*/}\n            </div>\n            {/*<div> {fromArrToComponent(this.state.chat)}</div>*/}\n        </div>\n    }\n}\n\nlet fromArrToComponent = (arr) => {\n    return arr.map(el => <div> {el.name + \" \" + el.text} </div>)\n}\nexport default App;\n","let axios = require('axios')\r\nlet cheerio = require('cheerio')\r\nexport let h3lobby = {\r\n    getStreamerName(channel, words) {\r\n        let streamerName = \"\"\r\n        if (channel === \"#ariywariy\") streamerName = \"Ariy\";\r\n        else streamerName = channel.substr(1);\r\n        if (words.length > 1) {\r\n            streamerName = words[1];\r\n        }\r\n        return streamerName;\r\n    },\r\n    getRating(channel, words) {\r\n        let streamerName = this.getStreamerName(channel, words)\r\n\r\n        return axios.get(`https://heroes3.tv/${streamerName}#g`).then((res, err) => {\r\n\r\n            if (err) return console.error(err);\r\n\r\n            let $ = cheerio.load(res.data);\r\n\r\n            let title = $('.rating.val');\r\n            return `${title.text()}`\r\n        })\r\n\r\n    },\r\n    getStats(channel, words) {\r\n        let streamerName = this.getStreamerName(channel, words)\r\n        return axios.get(`https://heroes3.tv/${streamerName}#g`).then((res, err) => {\r\n            if (err) return console.error(err);\r\n            let $ = cheerio.load(res.data);\r\n\r\n            let games = $('.games.val').text();\r\n\r\n            if ($('.val.winColor').get(0) === undefined) {\r\n                return `Игрок ${streamerName} не найден`\r\n            }\r\n            let wins = $('.val.winColor').get(0).children[0].data\r\n            let loses = $('.val.defColor').get(0).children[0].data\r\n            let winrate = $('.val.winColor').children().text()\r\n            return `Всего игр: ${games}. ${wins} побед, ${loses} поражений. Винрейт: ${winrate}`\r\n\r\n        })\r\n    },\r\n    getLast(channel, words) {\r\n        let streamerName = this.getStreamerName(channel, words)\r\n        return axios.get(`https://heroes3.tv/${streamerName}#g`).then((res, err) => {\r\n            if (err) return console.error(err);\r\n\r\n\r\n            let $ = cheerio.load(res.data);\r\n\r\n            let result = $('.gameHistory').children('div').first().children('.gameResult').children('.result').attr('class').split(' ')[1]\r\n            let opp = $('.gameHistory').children('div').first().children('.opp')['1'].children[1].children[0].data\r\n            return `Последняя игра ${result} против ${opp}`\r\n\r\n        })\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}