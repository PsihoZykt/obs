{"version":3,"sources":["obs/obs.js","App.js","serviceWorker.js","index.js"],"names":["obs","require","App","props","state","chat","window","onChange","e","setState","text","target","value","onClick","connect","address","password","then","console","log","send","data","scenes","length","forEach","scene","name","currentScene","catch","err","fromArrToComponent","this","React","Component","arr","map","el","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8QACMA,G,MAAM,IADSC,EAAQ,MCoBvBC,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,KAAM,IAEpBC,OAAOF,MAAQ,EAAKA,MAJL,E,qDAgBT,IAAD,OACL,OAAO,6BACH,6BACI,2BAAOG,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAL,2BAAkB,EAAKL,OAAvB,IAA8BM,KAAMF,EAAEG,OAAOC,YACrE,4BAAQC,QAAS,WDvC7Bb,EAAIc,QAAQ,CACRC,QAAS,iBACTC,SAAU,KAETC,MAAK,WAGF,OAFAC,QAAQC,IAAR,6CAEOnB,EAAIoB,KAAK,mBAEnBH,MAAK,SAAAI,GACFH,QAAQC,IAAR,UAAeE,EAAKC,OAAOC,OAA3B,uBAEAF,EAAKC,OAAOE,SAAQ,SAAAC,GACZA,EAAMC,OAASL,EAAKM,eACpBT,QAAQC,IAAR,uDAA4DM,EAAMC,OAElE1B,EAAIoB,KAAK,kBAAmB,CACxB,aAAcK,EAAMC,cAKnCE,OAAM,SAAAC,GACHX,QAAQC,IAAIU,QCgBR,SAFJ,IAOqB,4BAAQhB,QAAS,WDb9Cb,EAAIoB,KAAK,2BAA4B,CAAC,OAAS,QAAS,KAAS,YAAYH,MAAK,SAAAI,GAC9EH,QAAQC,IAAIE,MACbO,OAAM,SAAAC,GAAG,OAAIX,QAAQC,IAAIU,QCWC,cAKrB,iCAAOC,EAAmBC,KAAK3B,MAAMC,Y,GAhC/B2B,IAAMC,WAqCpBH,EAAqB,SAACI,GACtB,OAAOA,EAAIC,KAAI,SAAAC,GAAE,OAAI,iCAAOA,EAAGV,KAAO,IAAOU,EAAG1B,KAA3B,SAEVR,IChDKmC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.c723d0fd.chunk.js","sourcesContent":["const OBSWebSocket = require('obs-websocket-js');\r\nconst obs = new OBSWebSocket();\r\nexport let obsConnect = () => {\r\n    obs.connect({\r\n        address: 'localhost:4444',\r\n        password: ''\r\n    })\r\n        .then(() => {\r\n            console.log(`Success! We're connected & authenticated.`);\r\n\r\n            return obs.send('GetSceneList');\r\n        })\r\n        .then(data => {\r\n            console.log(`${data.scenes.length} Available Scenes!`);\r\n\r\n            data.scenes.forEach(scene => {\r\n                if (scene.name !== data.currentScene) {\r\n                    console.log(`Found a different scene! Switching to Scene: ${scene.name}`);\r\n\r\n                    obs.send('SetCurrentScene', {\r\n                        'scene-name': scene.name\r\n                    });\r\n                }\r\n            });\r\n        })\r\n        .catch(err => { // Promise convention dicates you have a catch on every chain.\r\n            console.log(err);\r\n        });\r\n\r\n}\r\nexport let obsTest = () => {\r\n    // obs.send('GetSceneList').then(data => {\r\n    //     console.log(data.scenes[0].sources);\r\n    // });\r\n    obs.send('SetTextGDIPlusProperties', {\"source\":\"Opp_1\", \"text\" : \"Testing\"}).then(data => {\r\n        console.log(data);\r\n    }).catch(err => console.log(err));\r\n\r\n}\r\n","import React from 'react';\nimport tmi from 'tmi.js'\nimport {obsConnect, obsTest} from \"./obs/obs\";\n\nconst options = {\n    options: {\n        debug: true,\n    },\n    connection: {\n        reconnect: true,\n    },\n    identity: {\n        username: \"advicerfromchat\",\n        password: \"oauth:cchg3xx5wmu0pcspo0ku3eoqmqsfxd\",\n    },\n    channels: ['psihoz_ykt',\n        // \"ariywariy\", \"nobodydie_\", \"bakhtik\"\n    ],\n};\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {chat: [] }\n\n        window.state = this.state;\n        // this.client = new tmi.client(options);\n        // this.client.connect()\n        // this.client.on('connected', (address, port) => {\n        //     console.log(\"connected\")\n        // });\n        // this.client.on('chat', (channel, userstate, message, self) => {\n        //     console.log(userstate)\n        //    let chat =  [...this.state.chat, {name: userstate[\"display-name\"], text: message}];\n        //     this.setState({chat})\n        // });\n    }\n    render() {\n        return <div>\n            <div>\n                <input onChange={(e) => this.setState({...this.state, text: e.target.value})}/>\n                <button onClick={() => {\n                    // this.setState({...this.state, chat: [...this.state.chat, {name: \"advicerfromchat\", text: this.state.text}]})\n                    // this.client.say(\"ariywariy\", this.state.text)\n                    obsConnect();\n                }\n                }> send</button> <button onClick={() => {\n                   obsTest();\n                }\n                }> Test obs</button>\n            </div>\n            <div> {fromArrToComponent(this.state.chat)}</div>\n        </div>\n    }\n}\n\nlet fromArrToComponent = (arr) => {\n    return arr.map(el => <div> {el.name + \" \" +  el.text} </div>)\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}